import win.ui;
import win.ui.menu;
import web.form;
import web.json;
import web.script;
import process;
import win.util.round;
import win.util.tray;
import win.clip;
import win.clip.viewer;
import web.layout;
import web.layout.debug; 
import web.layout.behavior.windowCommand; 
import web.layout.behavior.tabs; 

var winform = ..win.form(bottom=605;parent=...;right=305;border="none";text="禅道桌面提醒工具";)
wbLayout = web.layout(winform)  
wbLayout.go("/layout/index.html") 

alignRight(winform);
tray         = win.util.tray(winform);
tray.message = 0x400+9981/*_WM_TRAYMESSAGE*/
tray.tip     = lang.prompt.softName;
winform.popmenu = win.ui.popmenu(winform);
winform.popmenu.add(lang.popmenu.exit, function(id){ exit()});

winform.wndproc = function(hwnd,message,wParam,lParam)
{
	select(message) 
	{
		case( 0x400+9981/*_WM_TRAYMESSAGE*/ ) 
		{ 
			if(lParam = 0x203/*_WM_LBUTTONDBLCLK*/)
			{
				winform.show(); 
			}
		
	    	if( lParam = 0x205/*_WM_RBUTTONUP*/ )
	    	{
	    		import mouse;
	    		x,y = mouse.getPos();	    		
	    		win.setForeground(winform.hwnd)
	    		winform.popmenu.popup( x,y,true )
	    	}
		} 
		case( 0x112/*_WM_SYSCOMMAND*/ ) 
		{ 		
			if( wParam == 0xF020/*_SC_MINIMIZE*/ )
			{		
				winform.show(false); 
				tray.pop(lang.prompt.minToTray, lang.prompt.common);
  			}
  			if( wParam == 0xF060/*_SC_CLOSE*/) 
  			{
  				exit();
  			}
		}
	}	
}

function exit()
{
	tray.delete();
 	winform.close();
 	win.quitMessage();
}

function viewObject(object, id)
{	
	process.execute(getAPI({object; 'view'; id; viewType='html'}));
}

currentModule = 'todo';
function listener()
{
	menuListener = wbLayout.queryEles("#moduleMenu > div");
	for (i,moduleTab in menuListener)
	{
		moduleTab.onMouseClick = function( ltTarget,ltEle,x,y,mouseParams )
		{
			currentModule = ltEle.panel;
			loadFeatureBar(currentModule);	
			var browseType = currentModule == 'todo' ? 'today' : 'assignedTo';
    		loadList(currentModule, browseType);		
		}
		moduleTab.attachEventHandler();
	}

	featureBarListener = wbLayout.queryEles(".featureBar a");
	for(i, typeTab in featureBarListener)
	{
		typeTab.onMouseClick = function( ltTarget,ltEle,x,y,mouseParams )
		{
			currentBrowseType = ltEle.id;
   		 	loadList(currentModule, currentBrowseType);		
		}
		typeTab.attachEventHandler();
	}
	
	listListener = wbLayout.queryEles(".dataList a");
	for(k,item in listListener)
	{
		item.onMouseClick = function( ltTarget,ltEle,x,y,mouseParams )
		{
			objectID = ltEle.id;
			viewObject(currentModule, objectID);
		}
		item.attachEventHandler();
	}
	
	pagerListener = wbLayout.queryEles(".pager a");
	for(k,link in pagerListener)
	{	
		link.onMouseClick = function( ltTarget,ltEle,x,y,mouseParams )
		{
			if(ltEle.id = 'pre')  loadList(currentModule, currentBrowseType, pager.pageID - 1);
			if(ltEle.id = 'next') loadList(currentModule, currentBrowseType, pager.pageID + 1);
			if(ltEle.id = 'last') loadList(currentModule, currentBrowseType, pager.pageTotal);
		}
		link.attachEventHandler();
	}		
}

function setTodoStatus(active)
{
	if(active)
	{
  		wbLayout.queryEle("div[panel='todo'] div").style.background = "rgb(235,242,249)";
  		wbLayout.queryEle("div[panel='todo'] span").style.color = "rgb(20,91,204)";
  	}
  	else 
  	{
  	  	wbLayout.queryEle("div[panel='todo'] div").style.background = "rgb(20, 91, 204);";
		wbLayout.queryEle("div[panel='todo'] span").style.color = "white";
  	}	
}

function initModuleMenu()
{
	moduleMenu = '';
 	if(user.role == 'qa' or user.role == 'qd') config.order.menu = {"todo"; "bug"; "task"}
 	if(user.role == 'po' or user.role == 'pd') config.order.menu = {"todo"; "story"; "bug"}
  	for(i=1; #config.order.menu; 1)
  	{
  		var module = config.order.menu[i];
  		moduleMenu += "<div panel='" + module + "'>";
  		moduleMenu += "<div><a id='icon-" + module + "'></a><span>";
  		moduleMenu += lang.moduleMenu[module] + "</span></div></div>";		
 	 }
  	wbLayout.queryEle("#moduleMenu").innerHTML = moduleMenu;
	setTodoStatus(true);
}
initModuleMenu();

function loadFeatureBar(module)
{
	setTodoStatus(module == 'todo');
  	featureBar = ''
  	for(i=1; #config.order[module]; 1)
  	{	
 	 	 var browseType = config.order[module][i];
  		 featureBar += "<span><a id='" + browseType + "' onclick=loadList('" + module + "','" + browseType + "')>" + lang.featureBar[module][browseType] + "</a></span> ";
 	 }
 	 wbLayout.queryEle("#" + module + " .featureBar").innerHTML = featureBar;
 	 listener();
}
loadFeatureBar('todo');

function loadList(object, browseType, pageID)
{
	var list = "<tbody>";
	var response = http.get(getAPI({'my'; object; browseType; pageID = pageID}));
	response = web.json.parse(response);
	response = web.json.parse(response.data);
	pager = response.pager;
	var index = object == "story" ? "stories" : object + "s";
	for(k,v in response[index]) 
	{
		var title = v.title ? v.title : v.name; 
		title = string.replace(title,"\\","")
		list += "<tr><td class='id'>#" + v.id + "</td><td nowrap style='overflow:hidden;'><a id='" + v.id + "')>" + title + "</a></td></tr>";
	}
	list += "</tbody><tfoot><tr><td colspan=2 align='right'><div class='pager'>";
	
	if(pager.recTotal)
	{
		list += string.format(lang.pager.summary, pager.recTotal, pager.recPerPage, pager.pageID, pager.pageTotal);
		list += " <a id='pre'>"  + lang.pager.pre  + "</a>";
		list += " <a id='next'>" + lang.pager.next + "</a>";
		list += " <a id='last'>" + lang.pager.last + "</a>";
	}else 
	{
		list += lang.pager.empty;
	}
		
	list += "</div></td></tr></tfoot>";
	
	wbLayout.queryEle("#" + object + "List").innerHTML = list;
	var types = wbLayout.queryEles("#" + object + " .featureBar a");
  	for(k,v in types)
  	{
  		wbLayout.queryEle("#" + object + " #" + v.id).style.color = "rgb(112,112,112)";
  	}
	wbLayout.queryEle("#" + object + " #" + browseType).style.color = "rgb(20,91,204)";
	
	listener();
}
loadList('todo', 'today');

win.clip.viewer(winform).onDrawClipboard = function() 
{ 
	createFile = assert(loadcode("/create.aau"));	
	createFile();
}

winform.addtimer(config.sys.updateInterval, function(){getActions()});
function getActions()
{
	actions  = {}
	var actionID = string.load(ACTION_FILE) or 0;
	var response  = http.get(getAPI({"api"; "getmodel"; "action"; "getUnreadActions"; "actionID=" + actionID}));
	response      = web.json.parse(response);
	response.data = web.json.parse(web.json.parse(response.data));
	
	if(!table.count(response.data)) return;
	for(object,list in response.data)
	{
		for(k,action in list)
		{
			if(action.actionID > actionID) actionID = action.actionID;
			action.action = string.replace(action.action,"\\","")
			actions[action.actionID] = action;
		}		
	}
	
	string.save(ACTION_FILE, actionID);
	notifyFile = assert(loadcode("/notify.aau"));	
	notifyFile();
}

winform.show();
win.loopMessage();
return winform,wb;
